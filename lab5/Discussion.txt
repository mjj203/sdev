Share your output with the class and pick one vulnerability and research how you could fix it.
If you don't have any vulnerabilities, look at another student's submitted file and provide some insights into the findings.



I ran both bandit and snyk on my sdev git project and bandit only found 1 security issue within my password_generator.py
script within the hash_password() function related to MD5 being a weak algorithm. Snyk found the same issue, but listed it has a low
priority compared to bandit listing it as a high. The has_password() function provides multiple algorithm choices up to one of the most
secure (argon2id), so the fix is already implemented as can be seen from the snippet below.

```
def hash_password(password, algorithm):
    """
    Hashes a password using the specified cryptographic hash function.

    :param password: The password to be hashed.
    :param algorithm: A string indicating the hash function to use
    (md5, sha256, sha512, bcrypt, scrypt, argon2id).
    
    :return: A string representing the hashed password.
    :raises ValueError: If an invalid hashing algorithm is provided.
    """
    if algorithm == "md5":
        return hashlib.md5(password.encode()).hexdigest()
    if algorithm == "sha256":
        return hashlib.sha256(password.encode()).hexdigest()
    if algorithm == "sha512":
        return hashlib.sha512(password.encode()).hexdigest()
    if algorithm == "bcrypt":
        return bcrypt.hash(password)
    if algorithm == "scrypt":
        return scrypt.hash(password)
    if algorithm == "argon2id":
        return argon2.using(type="ID").hash(password)

    raise ValueError("Invalid hashing algorithm")
```

Instead I chose to fix the "Path Traversal" security flaw found by snyk in my csv2dict.py script after reading more about the attack vector.
A path traversal attack allows an attacker to write an arbitrary file, where in my script it read a CSV file and converts it to a JSON. In the
script both filenames are passed as input from the user without sanitizing or validating the input file names before using them. This can allow
an attacker to potentially provide a file path that leads to a sensitive location on the system. For example, an attacker could provide a JSON
file name like ../../../etc/passwd, which could overwrite a critical system file if the script has sufficient permissions. To mitigate this attack
vector I added a function called sanitize_filename() to sanitize the input filenames (csv_filename and json_filename). The function works by removing
directory traversal characters like ../ or ..\\, and explicitly checking for and rejecting file paths that refer to sensitive locations on a linux system
(`/etc`, `/root`) or sensitive files starting with `.` like `.git-credentials` in a users home directory. This approach ensures the script does not
inadvertently access or modify sensitive files or directories, which is a crucial aspect of securing file handling operations in any application.


PATH/DIRECTORY TRAVERSAL DEFINITION:
```
A Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder
 By manipulating files with "dot-dot-slash (../)" sequences and its variations, or by using absolute file paths, it may be possible to access
 arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.

Being able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user
providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server
hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid
or setgid flags in Unix systems).

Writing arbitrary files: Allows the attacker to create or replace existing files. This type of vulnerability is also known as Zip-Slip.
One way to achieve this is by using a malicious zip archive that holds path traversal filenames. When each filename in the zip archive
gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder.
If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary
code execution issue quite easily.
```